-- USERADMIN RESPONSIBILITIES
USE ROLE USERADMIN;

CREATE ROLE IF NOT EXISTS STUDENT_ANALYSER;

CREATE OR REPLACE USER TESTUSER
    PASSWORD = 'password'
    LOGIN_NAME = 'testuser'
    FIRST_NAME = 'test'
    LAST_NAME = 'user'
    EMAIL = 'test@user.com'
    MUST_CHANGE_PASSWORD = false
    DEFAULT_WAREHOUSE = COMPUTE_WH;


-- SYSADMIN RESPONSIBILITIES
USE ROLE SYSADMIN;
CREATE DATABASE IF NOT EXISTS students_semantic;
CREATE SCHEMA IF NOT EXISTS students_semantic.views_students;

CREATE DATABASE IF NOT EXISTS students_staging;
CREATE SCHEMA IF NOT EXISTS students_staging.students_merged_db;


-- SECURITYADMIN RESPONSIBILITIES
USE ROLE SECURITYADMIN;

GRANT ROLE STUDENT_ANALYSER TO ROLE SYSADMIN;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE STUDENT_ANALYSER;

GRANT USAGE ON DATABASE students_staging TO ROLE STUDENT_ANALYSER;
GRANT SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES ON SCHEMA students_staging.students_merged_db TO ROLE STUDENT_ANALYSER;
GRANT ALL PRIVILEGES ON FUTURE TABLES IN SCHEMA students_staging.students_merged_db TO ROLE STUDENT_ANALYSER;
GRANT OWNERSHIP ON ALL TABLES IN SCHEMA students_staging.students_merged_db TO ROLE STUDENT_ANALYSER;
GRANT OWNERSHIP ON future TABLES IN SCHEMA students_staging.students_merged_db TO ROLE STUDENT_ANALYSER;
GRANT OWNERSHIP ON ALL STAGES IN SCHEMA students_staging.students_merged_db TO ROLE STUDENT_ANALYSER;
GRANT OWNERSHIP ON future STAGES IN SCHEMA students_staging.students_merged_db TO ROLE STUDENT_ANALYSER;


GRANT USAGE ON DATABASE students_semantic TO ROLE STUDENT_ANALYSER;
GRANT USAGE ON SCHEMA students_semantic.views_students TO ROLE STUDENT_ANALYSER;
GRANT OWNERSHIP ON ALL VIEWS IN SCHEMA students_semantic.views_students TO ROLE STUDENT_ANALYSER;
GRANT OWNERSHIP ON future VIEWS IN SCHEMA students_semantic.views_students TO ROLE STUDENT_ANALYSER;

GRANT ROLE STUDENT_ANALYSER TO USER TESTUSER;


-- (We can maintain a raw staging layer in Snowflake (costly to maintain))
CREATE STAGE students_staging.students_merged_db.stage_student_data DIRECTORY = (ENABLE=TRUE);;
CREATE STAGE STUDENTS_STAGING.STUDENTS_MERGED_DB.STAGE_SCRIPTS DIRECTORY = (ENABLE=TRUE);;
CREATE STAGE STUDENTS_SEMANTIC.VIEWS_STUDENTS.VIEW_SCRIPTS DIRECTORY = (ENABLE=TRUE);;

-- OPTIONAL (We can maintain a raw staging layer in AWS (cheaper to maintain))
-- CREATE STAGE stage_students
-- URL = 's3://my-bucket/path/'
-- CREDENTIALS = (AWS_KEY_ID = 'my_access_key' AWS_SECRET_KEY = 'my_secret_key');


-- We can use permifrost to control accesses in snowflake (easier to maintain and track)


-- event table for capturing logs
CREATE EVENT TABLE STUDENTS_STAGING.STUDENTS_MERGED_DB.A_EVENTS;
ALTER ACCOUNT SET EVENT_TABLE = STUDENTS_STAGING.STUDENTS_MERGED_DB.A_EVENTS;

CREATE EVENT TABLE STUDENTS_SEMANTIC.VIEWS_STUDENTS.A_EVENTS;
ALTER ACCOUNT SET EVENT_TABLE = STUDENTS_SEMANTIC.VIEWS_STUDENTS.A_EVENTS;
